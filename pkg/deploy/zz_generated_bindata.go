// Code generated for package deploy by go-bindata DO NOT EDIT. (@generated)
// sources:
// manifests/ccm.yaml
// manifests/coredns.yaml
// manifests/local-storage.yaml
// manifests/metrics-server/aggregated-metrics-reader.yaml
// manifests/metrics-server/auth-delegator.yaml
// manifests/metrics-server/auth-reader.yaml
// manifests/metrics-server/metrics-apiservice.yaml
// manifests/metrics-server/metrics-server-deployment.yaml
// manifests/metrics-server/metrics-server-service.yaml
// manifests/metrics-server/resource-reader.yaml
// manifests/rolebindings.yaml
// manifests/runtimes.yaml
// manifests/traefik.yaml
//go:build !no_stage
// +build !no_stage

package deploy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ccmYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x94\x41\x8f\x13\x31\x0c\x85\xef\xf3\x2b\xa2\x1e\x91\xd2\x15\xe2\x82\xe6\x08\x07\xee\x2b\xc1\xdd\x4d\x1e\xdd\xd0\x4c\x1c\xd9\x4e\x61\xf9\xf5\x68\x3a\x5d\x51\x3a\xdb\xd2\x16\x10\x7b\x8b\xac\xf8\xf3\xf3\x73\x62\xaa\xe9\x13\x44\x13\x97\xde\xc9\x8a\xc2\x92\x9a\x3d\xb0\xa4\xef\x64\x89\xcb\x72\xf3\x56\x97\x89\xef\xb6\xaf\xbb\x4d\x2a\xb1\x77\xef\x73\x53\x83\xdc\x73\x46\x37\xc0\x28\x92\x51\xdf\x39\x57\x68\x40\xef\x36\x6f\xd4\x87\xcc\x2d\xfa\xc0\xc5\x84\x73\x86\xf8\x81\x0a\xad\x21\x9d\xb4\x0c\xed\x3b\xef\xa8\xa6\x0f\xc2\xad\xea\x98\xe8\x5d\x60\x96\x98\xca\x61\xbd\xce\x39\x81\x72\x93\x80\xfd\xa5\x0c\x52\x68\xe7\xdc\x16\xb2\xda\xc7\xd6\xb0\x09\x20\x20\xc3\xee\xd8\x6a\x1c\x8f\xb3\x1a\x8b\xc5\x1c\x89\x2d\x8a\x1d\x21\x0f\x50\x95\x2c\x3c\x5c\x0d\x2d\x1c\x8f\x65\x2e\x5e\x2d\xae\xc8\xbd\x53\x23\x6b\xba\x0b\x28\x64\x9b\xc2\x61\xec\x00\x3b\xe9\xbb\x08\xfc\xc4\x99\xf2\x38\x9e\xf0\x31\x27\x9d\x0e\x5f\x6f\x42\xcf\xb4\x5d\xeb\xdd\x9e\x45\x21\x70\x3b\x37\x99\x51\xef\x65\x86\xd2\x00\xad\x34\x93\xf7\x3b\x16\xd5\xaa\x73\x5a\x24\x0c\x5c\x14\xc7\xca\x9e\x9f\x6f\x4c\x1a\x78\x0b\x79\xdc\x3f\xe9\xe7\x1e\x60\x89\x95\x53\x31\xcd\x73\x07\x4f\xcd\xc4\xfb\xee\xf6\x1f\xfb\x2e\x95\x98\xca\xfa\xea\x8f\xcb\x19\xf7\xf8\x3c\xde\x7e\xea\xf2\x4c\xe5\xce\xb9\xf9\xaa\xb8\xa8\x8e\xb6\xd5\x17\x04\xdb\xed\x88\x09\xf1\x51\x21\x97\xe5\xba\x9f\xc3\xee\xdd\xa6\xad\xe0\xf5\x51\x0d\xc3\x7f\x71\xcc\x8f\x7c\x1f\x91\xb1\x26\xe3\xbf\x6a\xe0\xd4\x55\x7f\x54\xe0\xa5\x38\xf7\x87\x96\xa1\x58\x0a\x3b\xb2\x17\x50\x3c\x27\xee\x46\x4b\x7f\xf1\x12\xdf\x0c\x65\xec\xcd\x53\x4d\xe3\xf2\x39\x29\xe3\x9f\xf8\xfb\x23\x00\x00\xff\xff\xde\xc0\x02\x82\x7a\x07\x00\x00")

func ccmYamlBytes() ([]byte, error) {
	return bindataRead(
		_ccmYaml,
		"ccm.yaml",
	)
}

func ccmYaml() (*asset, error) {
	bytes, err := ccmYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ccm.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _corednsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x51\x6f\x22\xbf\x11\x7f\xe7\x53\x58\x2b\xe5\xa5\xea\x92\xd0\xe8\xae\xa9\xdf\x72\x40\xee\x50\x13\x0e\x01\x39\x29\xaa\xaa\xc8\x78\x07\x70\xe3\xf5\xb8\xb6\x97\x84\x5e\xf3\xdd\x2b\xaf\x97\x65\x0d\x9b\x5c\x92\xde\x9f\x17\x76\x77\x3c\x33\x9e\x9f\x67\x7e\x33\x66\x5a\xfc\x00\x63\x05\x2a\x4a\x36\xbd\xce\x83\x50\x19\x25\x33\x30\x1b\xc1\xe1\x92\x73\x2c\x94\xeb\xe4\xe0\x58\xc6\x1c\xa3\x1d\x42\x14\xcb\x81\x12\x8e\x06\x32\x65\xab\x77\xab\x19\x07\x4a\x1e\x8a\x05\xa4\x76\x6b\x1d\xe4\x9d\x34\x4d\x3b\x4d\xd3\x66\xc1\x78\x97\x15\x6e\x8d\x46\xfc\x87\x39\x81\xaa\xfb\x70\x61\xbb\x02\x4f\x6b\xa7\x7d\x59\x58\x07\x66\x8a\x12\x22\x8f\x92\x2d\x40\x5a\xff\x44\x4a\x17\x46\x81\x83\x52\x75\x81\xe8\xac\x33\x4c\x6b\xa1\x56\xc1\x47\x9a\xc1\x92\x15\xd2\xd9\x7a\xab\x61\x43\x74\xb7\x63\x53\x48\xb0\xb4\x93\x12\xa6\xc5\x57\x83\x85\x2e\x2d\xa7\x24\x49\x3a\x84\x18\xb0\x58\x18\x0e\xd5\x37\x50\x99\x46\xa1\x4a\x63\x29\xb1\x01\x94\xf0\xa2\x31\x0b\x0f\x75\xfc\xfe\x75\x03\x66\x51\xe9\x4a\x61\x5d\xf9\xf0\xc8\x1c\x5f\x1f\xfb\xcb\x84\xe5\xb8\x01\xb3\xad\x70\x78\xc5\xbb\x14\xbf\xb4\xfe\x7f\xa1\xfd\x45\xa8\x4c\xa8\x55\x04\x3a\x53\x0a\x5d\xa9\x59\x21\xdf\x66\x32\x3a\x0c\x56\x38\x2c\x74\xc6\x1c\x50\x92\x38\x53\x40\xf2\xfb\xcf\x0e\x25\x4c\x61\x59\xee\xaf\x42\xf3\x95\x58\x3b\x84\x1c\x27\xd6\x0b\x96\x6d\xb1\xf8\x17\x70\x57\x26\x46\x6b\x09\x7c\x38\xf1\xf7\x80\xa3\x5a\x8a\xd5\x0d\xd3\x1f\x29\xa7\xdd\xf2\x3e\x1a\x58\x0a\x09\x94\xfc\xb7\xc4\xb4\x4b\x3f\x9d\x93\x9f\xe5\xa3\xff\x81\x31\x68\x6c\xfd\xba\x06\x26\xdd\xba\x7e\x35\xc0\xb2\x6d\xfd\xb6\x3f\x0e\x72\xf2\xb3\x7f\x7d\x3b\x9b\x0f\xa7\xf7\x83\xef\x37\x97\xa3\xf1\xf3\x09\x11\x2a\x65\x59\x66\xba\xcc\x68\x46\x84\xfe\x1c\x1e\xf6\x9e\x48\x59\x01\x44\x28\x0b\xbc\x30\xd0\xf8\xbe\x64\x52\xba\xb5\xc1\x62\xb5\x6e\xb7\x52\xaf\x7d\xde\x6f\x14\xad\xb3\xe4\x14\x1c\x3f\xad\xa0\x38\x1d\x63\x06\xdf\xca\xcf\x4d\xa7\xce\x49\xf2\xf9\xac\xf1\xc1\x80\x44\x96\x91\xde\x27\xdb\xbe\x85\x16\x67\xda\x60\x0e\x6e\x0d\x85\x25\xf4\x6f\xbd\x4f\xe7\xb5\x60\x89\xe6\x91\x99\x8c\x74\xc3\x4e\x7c\x39\xca\x4d\x97\xa3\x5a\xd6\x4b\x38\xe3\x6b\x20\xe7\xfb\x1d\x48\x44\xdd\x89\x37\xd3\x90\xb1\x6c\xc1\x24\x53\x7c\x8f\x8f\xc8\x35\x1a\x17\x87\xca\x0b\xeb\x30\x3f\xfd\x53\xd7\xf3\x81\x11\x59\x58\x1d\x36\xfc\xea\x7a\xcf\x48\x60\x8e\x52\x8e\x69\x6d\xf7\x85\x3e\x00\x2d\x71\x9b\xc3\xc7\x78\xfc\xa0\x84\x2f\x6c\xca\xb4\xae\x96\x04\xc5\xc3\xc2\x0e\x86\x13\x9f\xa9\x83\xf1\x2c\xe9\x58\x0d\x9c\x96\xec\xb6\x11\x7e\x7f\xdf\x84\x75\x68\xb6\xd7\x22\x17\x8e\x12\x8f\xa4\xa7\x01\x07\xab\x6d\xf0\xe1\xb6\x1a\x28\x99\xa2\x94\x42\xad\x6e\x4b\x42\x09\x04\xd4\xfc\x42\x2b\x40\x73\xf6\x74\xab\xd8\x86\x09\xc9\x16\xbe\x2a\x7a\xde\x1c\x48\xe0\x0e\x4d\x58\x93\x7b\x82\xbc\x6e\xc4\xd0\x1e\x85\x83\x5c\xcb\xda\x70\x13\xa8\xf2\x24\x23\xfd\x97\x70\xd8\x45\x1a\x92\x4c\xa0\x11\x6e\xdb\x97\xcc\xda\x71\x80\x24\x40\x9a\xf2\x40\x47\x29\x37\xc2\x09\xce\x64\x52\xa9\xd8\x88\x71\xc6\x07\xe7\x53\x42\x83\x12\x4c\x93\x94\xfd\x2f\x25\x0f\xb0\xf5\x80\x57\xe6\x2e\xb3\x0c\x95\xfd\xae\xe4\x36\x69\x94\x04\x6a\xaf\x89\x86\x92\x64\xf8\x24\xac\xb3\xc9\x91\x01\x85\x19\xa4\x9e\x62\x0f\x88\x9d\xa3\x72\x06\x65\xaa\x25\x53\xf0\x46\x9b\x84\xc0\x72\x09\xdc\x51\x92\x8c\x71\xc6\xd7\x90\x15\x12\xde\xee\x32\x67\x1e\xa1\xdf\xe1\xcb\x7b\x98\x45\x09\x71\x9c\xb1\x68\x29\x91\x42\x15\x4f\x35\xcc\x1a\x25\xae\xb6\x33\xed\x19\xb3\x8f\xca\x27\xa8\x6f\xc4\x4d\xd0\x73\xf6\x34\x7b\x80\xc7\x90\x72\xbb\xdf\x4e\xf3\xef\x3e\xba\xd8\x89\xa7\x38\x5f\x1a\x8d\xd5\x8f\x6b\x50\xb7\xca\x32\x27\xec\x52\x84\xfc\x1d\xe0\x18\xdd\x2e\x86\xc6\xd2\x32\x01\x8f\xe3\x78\x21\xc1\x5f\x4f\x53\x42\xfc\x89\x32\xa1\xc0\xd4\x1a\xe9\x11\x1f\x84\x9f\xc8\xd9\xca\xa7\xee\xc9\xcf\xd9\xdd\x6c\x3e\xbc\xb9\x1f\x0c\xaf\x2e\x6f\xaf\xe7\xf7\xd3\xe1\xd7\xd1\x6c\x3e\xbd\x7b\x3e\xa9\x59\x29\xfc\xd3\x5e\xb7\xd7\xeb\x9e\x27\xb1\x89\x49\x21\xe5\x04\xa5\xe0\x5b\x4a\x46\xcb\x31\xba\x89\x01\x0b\x65\x5f\x0d\xbf\x68\xf6\xa9\xa3\xf6\x1c\x71\x10\x55\x0e\x39\x9a\x2d\x25\xbd\xbf\x9e\xdd\x88\xa8\x11\xfc\xbb\x00\x7b\xb8\x9a\xeb\x82\x92\xde\xd9\x59\xde\x6a\x23\x32\xc1\xcc\xca\x52\xf2\x0f\x92\xa4\x9e\xf1\x93\x3f\x93\x24\x22\xdd\x5d\xe7\x4d\xc8\x3f\x6b\x95\x0d\xca\x22\x87\x1b\x5f\xae\x51\x6e\xec\xb0\xf4\x0d\x3f\x0d\x8b\x1a\xfe\x73\xbf\x7e\xc2\xdc\x9a\x46\xb4\x1e\xc5\xc2\x32\x5f\xc0\x94\xf8\x39\xea\xd8\x70\xc9\xff\xe9\x3b\xed\x57\x6d\xe3\xd7\x6e\x7c\xc3\x89\xc2\xa9\xd3\x65\x82\xc6\x51\xd2\xe8\x98\xbb\x36\x12\x6f\x5f\x1b\x74\xc8\x51\x52\x72\x3b\x98\xbc\xd7\x4e\xea\xb8\x6e\xb5\x35\xef\xbf\x62\x2b\xea\xe3\x3b\x6b\x39\x38\x23\x78\xfb\xce\x9a\xd6\xca\x11\xc6\x73\x35\x2a\x07\x4f\xae\x99\x41\x4c\x4a\x7c\x9c\x18\xb1\x11\x12\x56\x30\xb4\x9c\xc9\x92\x7f\xa9\x9f\x31\x6c\x13\x75\xce\x34\x5b\x08\x29\x9c\x80\x83\x1c\x64\x59\x16\x7f\x48\xc9\x78\x38\xbf\xff\x32\x1a\x0f\xee\x67\xc3\xe9\x8f\x51\x7f\x18\x89\x33\x83\xfa\x50\x81\x49\xd9\x72\x70\x53\x44\x77\x25\x24\x54\xc3\x6c\x7c\x8c\x52\x6c\x40\x81\xb5\x13\x83\x0b\x68\xda\x5b\x3b\xa7\xbf\x82\x8b\x5d\xe8\x90\x2f\x07\x13\x23\xa9\xd2\x81\x92\x8b\xb3\x8b\xb3\xe8\xb3\xe5\x6b\xf0\x20\x7f\x9b\xcf\x27\x0d\x81\x50\xc2\x09\x26\x07\x20\xd9\x76\x06\x1c\x55\x66\x69\x3c\xb1\x69\x30\x02\xb3\x5a\xd6\x6b\xca\x9c\xc8\x01\x0b\xb7\x17\x36\x64\xb6\xe0\x1c\xac\x9d\xaf\x0d\xd8\x35\xca\x2c\x96\x2e\x99\x90\x85\x81\x86\xf4\x3c\x9a\x7b\xc5\xbb\xa1\x88\xa7\xe5\x06\x12\xbd\x8b\xde\x87\x91\x78\x05\x88\xbf\xfc\xc1\x38\x64\xca\xee\x18\x78\x10\xee\x59\x95\x20\x10\xc8\x3b\x08\x8c\xef\x6e\x32\x31\x6e\xed\x1d\xa4\x84\xc2\x41\x6e\x0f\x53\xba\x9c\x00\x76\xac\x7a\xd0\xb8\xc2\x11\xb4\x0a\x2b\xc5\xfa\x7a\xd0\xaa\x79\x2c\x7d\x23\x77\xbe\x25\xb4\xf4\x88\x48\xfd\x78\xe2\x59\x81\xc9\xaa\x06\x5f\xbc\x04\x56\xb7\xca\x96\x49\xbc\xd1\xa2\x5f\x1c\xc5\x8f\x2e\xe5\xfb\xab\x8c\x1f\x31\x42\x7e\x26\x9e\x0b\x93\x16\xb1\xe5\x86\xe9\x17\x2f\xe7\x6f\x98\xec\x77\x83\x6b\x35\xa8\x36\x2c\xbd\xf5\x0e\x10\x8f\xe6\x6d\x3e\x2b\x1f\xa3\x09\x6d\xde\x4a\xc7\xb3\xe7\x93\xa6\xd0\x1e\x48\xef\xaf\x47\xb3\x79\xb9\xa4\x6e\x5e\xe9\x41\x6b\xd2\xcd\x9e\x73\xd8\xa1\xd2\x96\xfe\xf3\x82\x42\x68\x1c\x69\x4b\x8b\xd1\x71\x27\x3a\x54\x11\xfa\x8a\xe5\x42\x6e\x77\x45\x18\x07\x30\x9a\x5c\x5d\xde\x8c\xae\xef\x26\xdf\xaf\x47\xfd\xbb\xe7\x93\xce\xff\x02\x00\x00\xff\xff\xed\x7f\x08\x9a\x98\x13\x00\x00")

func corednsYamlBytes() ([]byte, error) {
	return bindataRead(
		_corednsYaml,
		"coredns.yaml",
	)
}

func corednsYaml() (*asset, error) {
	bytes, err := corednsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "coredns.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localStorageYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x4d\x6f\x1b\x37\x13\xbe\xef\xaf\xe0\xcb\xb7\xbe\x14\xe1\xca\x6e\x8b\xb8\xe5\x4d\xb5\xe4\xc4\x80\xbe\x20\x29\x29\x82\x20\x10\x28\xee\x48\x62\xcc\x25\x09\x92\xab\x44\x75\xfd\xdf\x0b\x92\x2b\x79\x25\xcb\xb6\x8c\xb6\x7b\x59\xec\x70\xe6\x99\xe1\x3c\xf3\xb1\xcc\x88\x8f\x60\x9d\xd0\x8a\xa2\xf5\x45\x76\x2b\x54\x41\xd1\x04\xec\x5a\x70\x68\x73\xae\x2b\xe5\xb3\x12\x3c\x2b\x98\x67\x34\x43\x48\xb1\x12\x28\x92\x9a\x33\x49\x0c\xf3\x2b\x62\xac\x5e\x8b\x60\x0f\x96\xb8\x64\x47\x58\x6d\x98\xd4\x9d\x61\x1c\x28\xba\xad\xe6\x40\xdc\xc6\x79\x28\x33\x42\x48\xd6\xf4\x6c\xe7\x8c\xe7\xac\xf2\x2b\x6d\xc5\x9f\xcc\x0b\xad\xf2\xdb\x5f\x5d\x2e\x74\x6b\x17\xd3\x95\xac\x9c\x07\x3b\xd6\x12\x4e\x0f\xc8\x06\x6d\x5b\x49\x70\x34\x23\x88\x19\xf1\xce\xea\xca\x38\x8a\x3e\x63\xfc\x25\x43\xc8\x82\xd3\x95\xe5\x10\x25\x4a\x17\xe0\xf0\x1b\x84\x4d\x08\xcb\x79\x50\x7e\xad\x65\x55\x02\x97\x4c\x94\xf1\x84\x6b\xb5\x10\xcb\x92\x99\xa4\xa7\x0b\xd7\x92\x7a\x19\xa1\xd6\x60\xe7\x11\x66\x09\x3e\x1c\x4a\xe1\xe2\xfb\x1b\xf3\x7c\x85\xbf\xbc\xec\x1e\x54\x61\xb4\x50\xfe\x68\x08\x3b\x7f\xfb\xbe\x7e\x3c\x09\x78\x0d\x01\x75\xcf\x90\x5b\x60\x1e\x22\xe8\xf1\xf8\x9c\xd7\x96\x2d\xa1\xa6\xe1\x31\x68\x7d\xce\x25\x73\x0e\xdc\x69\x19\xf8\x47\xa4\xff\x2e\x54\x21\xd4\xf2\x74\xee\xe7\x42\x15\x59\x28\x80\x31\x2c\x82\xf2\xf6\x7a\xcf\x38\xce\x10\x7a\x5c\x6c\xa7\x94\x98\xab\xe6\x5f\x81\xfb\x58\x65\x47\x5b\xe8\xbf\x6a\x1c\x66\x8c\x7b\x48\x57\x07\x8c\xd4\x9b\x12\x5e\xd1\xb3\x4f\xbb\x72\x06\x38\x8d\xb4\x27\xdd\xf7\x22\x70\xbe\xe9\x89\x52\x78\x8a\xce\x33\x84\x9c\xb7\xcc\xc3\x72\x13\xb4\x10\xf2\x1b\x03\x14\x8d\xb5\x94\x42\x2d\x3f\x98\x82\x79\x88\x72\xdb\x94\x24\x55\x84\x4a\xf6\xfd\x83\x62\x6b\x26\x24\x9b\x4b\xa0\xe8\x22\xc0\x81\x04\xee\xb5\x4d\x3a\x65\xa8\x9a\x1e\x9b\x83\x74\x5b\x23\x66\xcc\x33\xd7\xf0\x50\x1a\xb9\x73\xd1\xbc\x7f\x78\xe4\x1e\xd2\x4b\x58\x08\x6d\x6f\x1f\x1e\x63\x85\xb6\xc2\x6f\xae\x42\xb1\x0f\x62\x32\x71\x4a\x12\x09\x33\x83\x70\x2b\xbc\xe0\x4c\xe2\x5a\xdf\xed\x71\x3f\x78\x1d\xf1\x31\x95\x5a\x82\x8d\x85\xd9\x88\x18\x21\x82\x6e\x61\x43\x11\xbe\xaa\xfd\xb5\x8b\x42\x2b\x37\x54\x72\x83\x1b\x5a\x08\x69\x13\xac\xb5\xa5\x08\x77\xbf\x0b\xe7\x1d\x3e\x02\x12\x23\x0f\xc5\x9b\x07\xd2\xad\x02\x0f\xb1\xf7\xb8\x56\xde\x6a\x49\x8c\x64\x0a\x5e\x81\x8b\x10\x2c\x16\xc0\x3d\x45\x78\xa0\x27\x7c\x05\x45\x25\xe1\x35\x8e\x4b\x16\x5a\xee\xdf\xf2\x18\xae\xc1\x84\x02\xbb\xcb\x20\x79\xa9\x0f\xd2\x23\x4a\xb6\x0c\x04\x9f\xdd\x4d\x3e\x4d\xa6\xdd\xfe\xac\xd3\xbd\x6e\x7f\xe8\x4d\x67\xe3\xee\xbb\x9b\xc9\x74\xfc\xe9\xfe\xcc\x32\xc5\x57\x60\x5b\xc7\x91\xe8\xfa\x3c\x3f\xcf\x7f\xfa\x0d\xef\x43\x8e\x2a\x29\x47\x5a\x0a\xbe\xa1\xe8\x66\x31\xd0\x7e\x64\xc1\xc1\x8e\xf2\x10\x71\x59\x32\x55\x3c\x10\x4e\x5e\x0a\x95\x20\xe7\x99\xf5\x8d\x6f\x42\xd2\x86\x6a\x88\x5a\xe0\x79\x2b\x49\xeb\x57\xfe\xd5\x69\xb5\xd3\x48\xfb\xa5\x1f\xaa\xcf\x35\x7d\xa7\x64\x25\x0b\x92\x94\x1a\xb9\x2f\x83\xfe\x88\xf9\x15\xdd\x73\xb0\xd3\x00\xb5\x7e\x0c\x36\x1a\x76\x66\x83\x76\xbf\x3b\x19\xb5\xaf\xba\x0d\xb0\x35\x93\x15\x5c\x5b\x5d\xd2\x3d\x76\x17\x02\x64\x51\x0f\xef\x47\xf2\xe4\x7b\xdb\xe5\xf9\x6e\x86\x65\xcd\x5b\xbd\xe2\x42\x49\xde\x67\x66\xdf\xdb\xa3\x92\xa9\xf3\x7b\x38\x87\xf7\xd7\xe5\xc3\x44\x9e\x24\x79\x9c\x1c\xcf\xce\xe4\xb0\xa0\x94\xd2\xbe\xd9\xf5\x05\x2c\x58\x25\xfd\xc7\x18\xeb\x34\x8e\x57\x1c\x2d\x52\x69\x35\x57\xf0\x41\x2f\x09\x47\x6a\x63\x12\x8f\x29\xc2\xde\x56\x80\xb3\x66\x9d\xa2\xba\x8e\x83\x41\x23\x90\x94\x9a\x7a\xdd\xf6\x75\x01\x14\xfd\xc1\x84\xbf\xd6\xf6\x5a\x58\xe7\xaf\xb4\x72\x55\x09\x36\xb3\xe9\xbf\x68\x5b\xd3\x1d\x90\xe0\x21\x26\xa6\xde\xa1\xdb\x8c\x66\x07\xff\x98\xcf\xae\xa6\x5d\xfd\x3e\xb1\x95\xb6\x86\x8d\x52\xa6\xe8\x2f\x12\x13\x72\x57\x53\x17\x47\x4c\x28\x90\x3e\x33\x98\x7e\xae\xa5\x77\x3b\x62\xe3\x39\xa6\x78\xdb\xd9\xa3\xf6\xf4\xfd\xec\x7a\x38\x9e\x0d\x86\x83\x59\xef\x66\x32\xed\x76\x66\x83\x61\xa7\x3b\xc1\x6f\x1e\x6c\x42\x74\x0e\xd3\xcf\xf8\xec\x6e\x6b\xd7\x1b\x5e\xb5\x7b\xb3\xc9\x74\x38\x6e\xbf\xeb\x46\x94\xfb\xb3\xf8\x27\x14\x9e\xfb\xfa\x9d\xbe\xef\xe3\x7e\xf3\xe1\xef\xa3\x0e\xf6\xff\xff\x6b\xcd\x85\x6a\xb9\x55\xe2\x12\x3c\x22\x50\xa5\xd5\x75\x5b\x08\x8b\x48\x89\xce\x2f\x2f\x2f\x11\x31\x08\xff\x70\xf7\x71\xd8\x9b\x75\x6e\xc6\xf7\x89\x79\xbe\x2a\x75\x81\x2e\xcf\xcf\x9b\x47\xad\x3c\xc7\x71\x0d\x32\x5b\xe8\x6f\xea\x04\x47\xb6\x44\xc4\x2e\x0e\xe1\x57\x20\x0d\xd8\x91\x2e\xf2\x0d\x2b\xe5\x0e\xe6\x80\xc4\x20\x4a\x3c\x8f\x74\x71\x74\xe3\x26\x6a\x13\x1a\x31\xb5\x52\x73\xad\x3e\x3d\xa2\x0f\x8c\xd0\x89\x63\x59\x38\xbe\x7e\xfb\x4b\x6b\x5e\xb9\xcd\x5c\x7f\xa7\x17\xf9\xcf\x6f\xf3\x8b\x53\xc7\xf0\xdf\x01\x00\x00\xff\xff\xe0\x3c\x88\x55\x09\x0d\x00\x00")

func localStorageYamlBytes() ([]byte, error) {
	return bindataRead(
		_localStorageYaml,
		"local-storage.yaml",
	)
}

func localStorageYaml() (*asset, error) {
	bytes, err := localStorageYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "local-storage.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerAggregatedMetricsReaderYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xcf\x31\x6b\xf4\x30\x0c\xc6\xf1\xdd\x9f\x42\x78\x7e\x93\x97\x6e\xc5\x6b\x87\xee\x1d\xba\x94\x1b\x94\xf8\x21\x27\xce\xb1\x83\x24\xe7\x68\x3f\x7d\xb9\x70\xdc\x58\x68\x27\x0d\x7f\x7e\x0f\xe8\x22\x35\x27\x7a\x29\xdd\x1c\xfa\xd6\x0a\x02\x6f\xf2\x0e\x35\x69\x35\x91\x4e\x3c\x8f\xdc\xfd\xdc\x54\xbe\xd8\xa5\xd5\xf1\xf2\x6c\xa3\xb4\xff\xfb\x53\x58\xe1\x9c\xd9\x39\x05\xa2\xca\x2b\x12\xd9\xa7\x39\xd6\xc4\xcb\xa2\x58\xd8\x91\x87\x15\xae\x32\xdb\xa0\xe0\x0c\x0d\x44\x85\x27\x14\xbb\x11\xfa\x61\xfd\xb1\x30\x78\x1b\x76\xc1\x35\x51\x74\xed\x88\xbf\x71\xc8\xe2\x7f\x71\x9c\x57\xa9\x0f\xa8\xbd\xc0\x52\x18\x88\x37\x79\xd5\xd6\x37\x4b\xf4\x11\xef\x7f\xdd\x7d\x3c\x05\x22\x85\xb5\xae\x33\x8e\xbe\xb5\x6c\xf1\x1f\xc5\xda\x32\xec\xc8\x3b\x74\x3a\xd2\x02\xbf\x95\x22\x76\xdc\x2b\xfb\x7c\x8e\xa7\xf0\x1d\x00\x00\xff\xff\xe5\x1d\x7a\x17\x89\x01\x00\x00")

func metricsServerAggregatedMetricsReaderYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerAggregatedMetricsReaderYaml,
		"metrics-server/aggregated-metrics-reader.yaml",
	)
}

func metricsServerAggregatedMetricsReaderYaml() (*asset, error) {
	bytes, err := metricsServerAggregatedMetricsReaderYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/aggregated-metrics-reader.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerAuthDelegatorYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\x31\x4e\xc4\x40\x0c\x45\xfb\x39\xc5\x5c\x60\x82\xe8\x90\x3b\xa0\xa0\x5f\x24\x7a\x67\xf2\x59\x4c\x92\x71\x64\x7b\x22\xc1\xe9\xd1\x8a\x88\x06\xd8\xf6\x4b\xff\xbd\x57\x4a\x49\xbc\xc9\x0b\xcc\x45\x1b\x65\x1b\xb9\x0e\xdc\xe3\x4d\x4d\x3e\x39\x44\xdb\x30\xdf\xf9\x20\x7a\xb3\xdf\xa6\x59\xda\x44\xf9\x71\xe9\x1e\xb0\x93\x2e\x78\x90\x36\x49\x3b\xa7\x15\xc1\x13\x07\x53\xca\xb9\xf1\x0a\xca\x2b\xc2\xa4\x7a\x71\xd8\x0e\x23\xff\xf0\xc0\x4a\x17\x70\x99\xb0\xe0\xcc\xa1\x96\x4c\x17\x9c\xf0\x7a\x79\xf1\x26\x4f\xa6\x7d\xbb\x52\x90\x72\xfe\x15\xf0\xe3\xfb\x5b\xe0\x7d\x7c\x47\x0d\xa7\x54\x8e\xef\x33\x6c\x97\x8a\xfb\x5a\xb5\xb7\xf8\x27\xf7\x98\x7d\xe3\x0a\xca\x73\x1f\x51\xbe\xf9\xe9\x2b\x00\x00\xff\xff\xa5\xb5\x26\x22\x2f\x01\x00\x00")

func metricsServerAuthDelegatorYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerAuthDelegatorYaml,
		"metrics-server/auth-delegator.yaml",
	)
}

func metricsServerAuthDelegatorYaml() (*asset, error) {
	bytes, err := metricsServerAuthDelegatorYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/auth-delegator.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerAuthReaderYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\x3d\x4e\x04\x31\x0c\x46\xfb\x9c\x22\x17\xf0\x22\x3a\x94\x0e\x1a\xfa\x45\xa2\xf7\x64\x3e\xc0\xcc\x8e\x13\xd9\xce\x08\x38\x3d\x1a\xb4\xfc\x34\x4b\x6f\xbf\xef\x3d\x22\x4a\xdc\xe5\x11\xe6\xd2\xb4\x64\x9b\xb8\x1e\x78\xc4\x4b\x33\xf9\xe0\x90\xa6\x87\xe5\xc6\x0f\xd2\xae\xb6\xeb\xb4\x88\xce\x25\x1f\xdb\x09\x77\xa2\xb3\xe8\x73\x5a\x11\x3c\x73\x70\x49\x39\x2b\xaf\x28\x79\x45\x98\x54\x27\x87\x6d\x30\xda\x51\x64\xe0\x19\x76\x3e\xf1\xce\x15\x25\x2f\x63\x02\xf9\xbb\x07\xd6\x64\xed\x84\x23\x9e\x76\x08\x77\xb9\xb7\x36\xfa\x3f\x26\x29\xe7\x5f\x91\x9f\x5d\xbc\x05\x74\x6f\x20\xee\xf2\x67\x1c\x1a\x52\xbf\xde\xbf\x35\x7c\x4c\xaf\xa8\xe1\x25\xd1\x19\xf4\x00\xdb\xa4\xe2\xb6\xd6\x36\x34\x2e\xa4\x5c\xd6\xff\x0c\x00\x00\xff\xff\x2a\x39\xe6\xe4\x44\x01\x00\x00")

func metricsServerAuthReaderYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerAuthReaderYaml,
		"metrics-server/auth-reader.yaml",
	)
}

func metricsServerAuthReaderYaml() (*asset, error) {
	bytes, err := metricsServerAuthReaderYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/auth-reader.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerMetricsApiserviceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8e\x4d\x6a\xc4\x30\x0c\x85\xf7\x3e\x85\x2e\xe0\x74\xb2\x2b\xde\x75\x59\x68\x61\x20\x65\xf6\x1a\x8f\x3a\x88\xe0\x1f\x24\xd9\x90\xdb\x97\x30\x71\xba\x13\x7a\xef\xfb\x24\xef\xbd\xc3\xca\x37\x12\xe5\x92\x03\x60\x65\xa1\x27\xab\x09\x1a\x97\x3c\xad\xef\x3a\x71\x79\xeb\xb3\x5b\x39\x3f\x02\x7c\x5c\x3f\x17\x92\xce\x91\x5c\x22\xc3\x07\x1a\x06\x07\x90\x31\x51\x80\x3e\xdf\xc9\x70\x9e\x12\x99\x70\xd4\x03\x76\x5a\x29\xee\x25\x7d\x81\xfb\x38\x88\xa3\xe9\xf7\x88\xe4\x0c\xb4\x62\xa4\x00\x6b\xbb\x93\xd7\x4d\x8d\x92\x03\x78\x4a\x69\xf5\x44\x86\x1c\xa0\x8f\xdf\x8f\xf3\x0e\x80\xb3\x52\x6c\x42\xcb\xca\xf5\xe7\x6b\xb9\x91\xf0\xef\x16\xc0\xa4\xd1\x10\x5d\x85\x8b\xb0\x6d\xdf\x9c\x39\xb5\x14\x60\xbe\x5c\xfe\x65\x23\x7d\xad\xff\x02\x00\x00\xff\xff\x14\x74\xa9\x1b\x25\x01\x00\x00")

func metricsServerMetricsApiserviceYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerMetricsApiserviceYaml,
		"metrics-server/metrics-apiservice.yaml",
	)
}

func metricsServerMetricsApiserviceYaml() (*asset, error) {
	bytes, err := metricsServerMetricsApiserviceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/metrics-apiservice.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerMetricsServerDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x4f\x6f\xdb\xc8\x0f\xbd\xfb\x53\x10\xfe\x21\xb7\x9f\xe2\x3f\xdd\xb4\x85\x80\x1c\x0c\x5b\xad\x0b\x24\xa9\x61\x39\xbb\xc8\xc9\x98\x8c\xe8\x78\x90\xd1\xcc\x2c\x49\xb9\xd5\x16\xfd\xee\x8b\xb1\x52\x45\x4a\x93\xa2\x8b\xdd\xea\xa0\x03\xf9\xf8\xf8\xf4\x86\x23\x26\x49\x32\x50\xc1\xfc\x8e\xc4\xc6\xbb\x14\x0e\x93\xc1\xbd\x71\x45\x0a\x39\xd2\xc1\x68\x9c\x69\xed\x2b\x27\x83\x12\x45\x15\x4a\x54\x3a\x00\x70\xaa\xc4\x14\x4a\x14\x32\x9a\x13\x46\x3a\x20\x3d\x84\x39\x28\x8d\x29\xdc\x57\xb7\x98\x70\xcd\x82\xe5\xe0\x69\x07\x15\x02\x8f\xda\x36\x0b\x0c\xd6\xd7\x25\xfe\xab\x16\x00\x56\xdd\xa2\xe5\x58\x09\x70\xff\x96\x13\x15\xc2\x77\xe5\x1c\x50\x47\x04\xe1\xc1\x44\x29\x4b\xc3\xe2\xa9\xbe\x30\xa5\x91\x14\xc6\x03\x00\x16\x52\x82\x77\x75\xc3\x23\x75\xc0\x14\xd6\xde\x5a\xe3\xee\xae\x43\xa1\x04\x8f\x71\xea\x46\x1a\x28\x40\xa9\x3e\x5f\x3b\x75\x50\xc6\xaa\x5b\x8b\x29\x4c\x22\x1d\x5a\xd4\xe2\xa9\xc1\x94\x4a\xf4\xfe\xa2\xa3\xf3\x65\xa5\x00\x82\x65\xb0\x2d\x7d\xd7\x99\xf8\xbc\xe0\x4e\x7c\x6c\xaf\xc1\x8f\x5a\x00\x7c\x33\x24\x3e\x81\x8c\x27\x23\xf5\xdc\x2a\xe6\xab\x23\xff\xb0\x71\x37\x71\xbe\xc0\x44\x93\x11\xa3\x95\x1d\x3e\xe0\xb9\x37\x1e\x57\x2f\x0b\x12\x6f\x91\x94\x18\xef\x3a\xaa\x12\xb8\xc7\x3a\x85\xe1\xfc\x81\x75\x56\x14\xde\xf1\x47\x67\xeb\x61\x8b\x01\xf0\x21\x56\x7a\x4a\x61\x98\x7d\x36\x2c\x3c\xfc\x8e\xe0\xa8\x8d\xbc\xc5\xd3\x38\x0f\xe4\x50\x90\x4f\x8d\x1f\x69\xef\x84\xbc\x4d\x82\x55\x0e\x7f\x92\x13\x00\x77\x3b\xd4\x92\xc2\xf0\xca\xe7\x7a\x8f\x45\x65\xf1\xe7\x5b\x96\x8a\x05\xe9\xbf\xe8\x75\xf0\xb6\x2a\xb1\xb5\xeb\x7f\x50\x46\x8f\xc1\x38\x90\x32\x00\x7b\xf8\x84\xa0\x95\x03\x56\x3b\xb4\x35\x54\x8c\xb0\x23\x5f\x26\xac\x29\xce\x18\x98\x52\xdd\x21\x83\x72\xc5\xc8\x13\x10\xaa\x22\xf1\xce\xd6\x10\x4d\x51\xc6\x21\xf1\xe0\xdb\x27\x35\x93\x24\x65\x48\x0a\x43\xad\x3a\x2c\x83\xd4\x0b\x43\x29\x7c\xf9\xfa\x10\x7c\xac\x4d\x9f\x14\x3f\x7b\xea\xd0\x88\x48\x61\x78\xf2\x25\xbf\xc9\x37\xd9\xe5\x76\x91\xbd\x9b\x5d\x5f\x6c\xb6\xeb\xec\xfd\x87\x7c\xb3\xbe\xf9\x7a\xa2\x55\x9c\x21\xde\x79\x92\xfd\xa8\x4f\x93\x1e\xc6\xa7\x6f\x4e\xa7\x8f\x86\x29\xba\xeb\xcd\x4f\x92\x68\x24\x89\xaa\xcf\x47\x52\x86\x5e\x86\x51\x57\x84\x49\xf0\x24\xe7\x93\xf1\xf4\x6c\xdc\xcb\xc6\x53\xb3\x28\x49\x20\xdc\x21\x11\x16\x89\x2a\x0a\x42\xe6\x24\x5e\x78\x3e\x3f\xf9\xb2\x5a\x67\xef\xb2\xf5\x3a\x5b\x6c\x67\x8b\xc5\x3a\xcb\xf3\xed\xe6\x66\x95\xe5\x5f\x4f\x9e\xe5\xa9\x18\x9b\x2b\xc2\xa2\xa4\xe2\x63\xdb\x1e\xb0\xf9\xb2\x84\x90\xbd\xad\xe2\x45\x38\x9f\x9c\x71\x0f\x21\x96\x13\x6d\xc2\x1e\x29\xe1\xca\x08\xf2\xf9\xe6\x22\xdf\x66\xf3\xc5\x32\x8b\xef\x7c\xb6\xfd\xe3\xc3\x66\xb9\x9d\x65\xf9\x76\x7a\xf6\x7a\xfb\x7e\x7e\xb9\xcd\x97\xb3\x57\x6f\x7f\xfb\xff\x23\x6e\xfd\x53\xa8\x27\x6c\x93\xe9\xdb\x6f\xb8\xe9\xd9\xeb\x97\xd8\x5e\x44\x75\xd8\xe6\xcb\xd9\x7c\x39\x9b\x8e\xb7\xab\x8f\x17\x37\x93\x57\xe3\xb3\xe7\xc8\xbe\x03\xb5\x2e\x44\x73\x2a\xd2\xd8\x39\xe3\x18\xfc\xb3\x42\x96\x5e\x0c\x40\x87\x2a\x85\xc9\x78\x5c\xf6\xa2\x25\x96\x9e\xea\x14\xde\x8c\x2f\x4d\x9b\x88\x47\xd1\x9b\x9a\x66\x62\xf7\x22\x81\x3b\xd5\xed\x6c\xaf\x3c\x49\xe4\xee\x8e\x4c\xfc\x35\x7a\xf1\xda\xdb\x14\x36\xf3\x55\x47\xb1\x2a\x8c\x43\xe6\x15\xf9\x5b\xec\x4a\x8c\xf4\xef\x51\xfa\xaa\x83\x92\x7d\x0a\xa3\x58\x55\xff\xd5\xcf\x1c\x9b\x3e\xd5\x04\xc0\x7a\x8f\x51\xed\x72\xb3\x59\xe5\x9d\x8c\x71\x46\x8c\xb2\x0b\xb4\xaa\xce\x51\x7b\x57\x70\xb3\xbd\x5a\x42\x24\xe3\x8b\x36\x35\xed\xa4\xc4\x94\xe8\x2b\x69\x73\x93\x4e\x8e\x2b\xad\x91\x79\xb3\x27\xe4\xbd\xb7\x45\x3f\xbb\x53\xc6\x56\x84\x9d\xec\xab\x36\x6b\xcd\x01\xff\xb1\x13\xb1\xe8\x17\x18\xf1\xfa\x07\x4e\x4c\xc6\xbf\xdc\x8a\xe3\xaf\x27\xae\x51\xef\x04\x3f\x4b\x7f\x9a\x55\x11\x37\xdc\xda\x7b\x79\x67\x2c\x36\xdb\x35\x05\xa1\x0a\xbb\xb0\xca\xcd\xf8\xca\xbb\x08\x7b\x3e\x79\xcd\x48\xc7\x1b\xd0\xfd\x1c\x65\xad\xff\xb4\x22\x73\x30\x16\xef\x30\x63\xad\xec\x71\xe9\xa6\xb0\x53\x96\x1f\x39\x9a\xdd\x72\x19\x17\xca\x33\x37\xe3\xe9\x22\x80\x66\xf5\xac\x9a\x23\x8b\xff\xd9\xbf\x03\x00\x00\xff\xff\x2d\xe6\x2f\xe4\x30\x0a\x00\x00")

func metricsServerMetricsServerDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerMetricsServerDeploymentYaml,
		"metrics-server/metrics-server-deployment.yaml",
	)
}

func metricsServerMetricsServerDeploymentYaml() (*asset, error) {
	bytes, err := metricsServerMetricsServerDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/metrics-server-deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerMetricsServerServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x3f\x4b\x04\x31\x10\xc5\xfb\x7c\x8a\x61\xfb\x28\xe2\x15\x92\x56\xb1\x13\x16\x4e\xec\xe7\x72\x4f\x0d\x9b\x6c\xc2\xcc\xec\xc2\x7e\x7b\xd9\xdc\x59\x1c\x5c\x97\xbc\x79\x7f\x7e\xde\x7b\xc7\x2d\x7d\x41\x34\xd5\x39\xd0\xfa\xe4\xa6\x34\x9f\x03\x1d\x21\x6b\x8a\x70\x05\xc6\x67\x36\x0e\x8e\x68\xe6\x82\x40\x05\x26\x29\xaa\x57\xc8\x0a\xb9\xca\xda\x38\x22\xd0\xb4\x9c\xe0\x75\x53\x43\x71\x44\x99\x4f\xc8\xba\x27\xa9\x5f\x64\x86\x41\x1f\x52\x7d\xbc\x34\x0d\x1f\x37\x55\xc3\x1d\x63\xcc\x8b\x1a\xa4\x3b\xd2\xbe\x30\x98\x2c\x18\x9c\x36\xc4\xbd\x58\x91\x11\xad\xca\x75\xe4\x45\x3d\xb7\x76\x87\xb1\x55\xb1\x4e\xe2\xfb\x33\xd0\xe1\xf0\xdc\x23\x17\x92\x5f\xb3\xa6\xfd\xdf\xa4\x5a\x8d\x35\x07\xfa\x7c\x1d\xbb\x62\x2c\x3f\xb0\xb1\xa7\xfe\x7d\xa9\xbd\x73\x49\x79\x1b\x6b\x4e\x71\x0b\x34\x0a\xbe\x21\x6f\x0b\xe7\xa3\x71\x9c\xdc\x5f\x00\x00\x00\xff\xff\x7b\xf5\x71\x2a\x57\x01\x00\x00")

func metricsServerMetricsServerServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerMetricsServerServiceYaml,
		"metrics-server/metrics-server-service.yaml",
	)
}

func metricsServerMetricsServerServiceYaml() (*asset, error) {
	bytes, err := metricsServerMetricsServerServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/metrics-server-service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServerResourceReaderYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\x41\x4b\xc4\x30\x10\x85\xef\xf9\x15\xc3\xde\xd3\xc5\x9b\xe4\xa6\x1e\xbc\xaf\xe0\x3d\x4d\x9f\xbb\x63\xdb\xa4\xcc\x4c\x2a\xfa\xeb\xa5\xb6\x2a\xb8\xb0\x2c\x78\x4a\x98\xe4\x7d\x8f\xf9\xbc\xf7\x2e\x4e\xfc\x0c\x51\x2e\x39\x90\xb4\x31\x35\xb1\xda\xa9\x08\x7f\x44\xe3\x92\x9b\xfe\x56\x1b\x2e\xfb\xf9\xc6\xf5\x9c\xbb\x40\x0f\x43\x55\x83\x1c\xca\x00\x37\xc2\x62\x17\x2d\x06\x47\x94\xe3\x88\x40\xfa\xae\x86\x31\x8c\x30\xe1\xa4\x5e\x21\x33\xc4\x49\x1d\xa0\xc1\x79\x8a\x13\x3f\x4a\xa9\x93\x2e\x09\x4f\xbb\x9d\x23\x12\x68\xa9\x92\xb0\xcd\x72\xe9\xa0\xfb\x0d\xe0\x88\x66\x48\xbb\x3d\x1d\x61\xd7\x31\xa6\xd2\xe9\x2f\xec\x1c\xb2\x9c\x03\xeb\x7a\x79\x8b\x96\x4e\xee\x7f\x26\xee\x39\x77\x9c\x8f\xd7\x0b\x29\x03\x0e\x78\x59\xbe\x7d\xaf\x73\xa1\xd2\x11\x9d\xbb\xbf\x5c\xa0\xb5\x7d\x45\xb2\x2f\xe9\x6b\xf6\x09\x32\x73\xc2\x5d\x4a\xa5\x66\xfb\x89\xff\xc9\xad\x63\x9d\x62\x42\xa0\xbe\xb6\xf0\x2b\xdf\x7d\x06\x00\x00\xff\xff\xdb\x55\x9e\x61\x2a\x02\x00\x00")

func metricsServerResourceReaderYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServerResourceReaderYaml,
		"metrics-server/resource-reader.yaml",
	)
}

func metricsServerResourceReaderYaml() (*asset, error) {
	bytes, err := metricsServerResourceReaderYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server/resource-reader.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rolebindingsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x94\x31\x6f\xe3\x30\x0c\x85\x77\xfd\x0a\x21\xbb\x72\x38\xdc\x72\xf0\xd8\x0e\xdd\x03\xb4\xbb\x2c\xb1\x09\x6b\x59\x14\x48\x39\x41\xfb\xeb\x0b\xc7\x4e\xd2\xc4\x76\xe0\xb4\xe9\x66\x0b\xe2\xfb\x48\xbe\x07\xd9\x84\x2f\xc0\x82\x14\x0b\xcd\xa5\x75\x4b\xdb\xe4\x0d\x31\x7e\xd8\x8c\x14\x97\xd5\x7f\x59\x22\xfd\xd9\xfe\x55\x15\x46\x5f\xe8\xc7\xd0\x48\x06\x5e\x51\x80\x07\x8c\x1e\xe3\x5a\xd5\x90\xad\xb7\xd9\x16\x4a\xeb\x68\x6b\x28\x74\xd5\x94\x60\x6c\x42\x01\xde\x02\x9b\xf6\x37\x40\x36\xd6\xd7\x18\x15\x53\x80\x15\xbc\xb6\xb7\x6d\xc2\x27\xa6\x26\x5d\x21\x2b\xad\x07\xe0\x23\x47\xde\x25\x43\x5d\x1c\xf5\x13\xf6\x0c\x69\xca\x37\x70\x59\x0a\x65\x6e\x82\x3c\x0b\xf0\xc4\x14\x4a\x19\x63\xd4\xf7\xb7\x35\xb2\xa6\x43\xfb\xff\xc4\x38\x8a\x99\x29\x04\x60\xc5\x4d\x80\xb3\xc6\xa5\xad\x30\x7a\xb1\x50\x5a\x33\x08\x35\xec\xa0\x3f\x8b\xe4\x41\x94\xd6\x5b\xe0\xb2\x3f\x5a\x43\x9e\x59\x6b\x6b\x90\x64\xdd\xa5\x40\x40\xc9\xfb\x8f\x9d\xcd\x6e\x33\xa2\x15\x21\xef\x88\x2b\x8c\xeb\x7e\xde\x31\xf1\xee\x4e\xa2\x80\x0e\xf7\x04\xa3\x5d\xb7\x0c\x87\x9e\x6f\x45\x8e\x10\x20\xfa\x44\x18\x73\xa7\x9d\xc8\x4f\x69\xb6\x0b\x39\x69\xff\xd0\xc5\xe9\xcc\x4f\x98\x79\xff\xb0\x9f\x03\x4e\x49\x6f\x67\x9c\xc7\xb8\x48\xfb\x75\xc0\xfd\x63\xff\x35\x07\xa6\x4d\xf0\x64\xe4\x07\x49\x1b\xc6\x60\x76\xa8\x7e\xcd\xf8\x91\x71\xee\x67\xfa\x50\xfc\xdc\xf0\xae\x72\x8f\x18\x3a\x79\x78\x1d\xe6\xb5\xf1\x19\x00\x00\xff\xff\x20\xa2\xda\xb0\x09\x06\x00\x00")

func rolebindingsYamlBytes() ([]byte, error) {
	return bindataRead(
		_rolebindingsYaml,
		"rolebindings.yaml",
	)
}

func rolebindingsYaml() (*asset, error) {
	bytes, err := rolebindingsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rolebindings.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _runtimesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xd0\x31\x8e\x84\x30\x0c\x05\xd0\x3e\xa7\xc8\x05\xc2\x6a\xbb\x55\xda\xbd\xc1\x14\xd3\x5b\xc4\x02\x8b\xc4\xa0\x38\xc0\x1c\x7f\x04\x1a\x26\x40\xed\xf2\x7f\x4b\xef\x4b\x86\x89\x9e\x98\x85\x46\xf6\x96\xc7\x80\xcd\xf0\x27\x0d\x8d\x3f\xcb\xaf\x19\x88\x83\xb7\x8f\x99\x0b\x25\xfc\x8f\x20\x62\x12\x16\x08\x50\xc0\x1b\x6b\x19\x12\x7a\xcb\x0b\x05\x02\xd3\x03\x87\x88\xf9\x9b\x9d\x73\x46\x87\x76\xf8\x9a\x30\x53\x42\x2e\x10\xef\x3b\xd7\xa3\xc6\x68\x9b\x67\xae\x2b\x7b\xd2\x60\xe3\xcc\x50\xa8\xad\xf2\x51\x68\xe0\x12\xa9\xeb\x4b\xb5\x3f\x59\x85\x9e\xe8\xf4\x8e\x3d\x69\xb0\xeb\x2a\x55\xdd\x82\x0a\x0a\x92\x30\x74\x78\x92\x8f\x46\x8d\xcf\x37\x3c\xab\xd1\xdb\xfd\x8a\x6f\xcd\x3b\x00\x00\xff\xff\xc7\xad\x48\x21\x9f\x03\x00\x00")

func runtimesYamlBytes() ([]byte, error) {
	return bindataRead(
		_runtimesYaml,
		"runtimes.yaml",
	)
}

func runtimesYaml() (*asset, error) {
	bytes, err := runtimesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "runtimes.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _traefikYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x91\x41\x6f\xd3\x4e\x10\xc5\xef\xfe\x14\x23\x4b\x39\xfd\xb5\x8e\x93\x3f\x12\x65\x6f\x21\x75\x21\x02\x4a\x15\xa7\xa0\x9e\xa2\xcd\x7a\x12\x2f\x59\xef\xae\x76\xc6\x11\xa1\xf4\xbb\xa3\x4d\x52\xda\x1e\x10\x08\x95\x9b\x3d\x3b\xf3\x66\xde\xef\x09\x21\x32\x15\xcc\x27\x8c\x64\xbc\x93\xd0\xa2\xed\x0a\xad\x98\x2d\x16\xc6\x0f\x77\xa3\x6c\x6b\x5c\x23\xe1\x2d\xda\x6e\xda\xaa\xc8\x59\x87\xac\x1a\xc5\x4a\x66\x00\x4e\x75\x28\x81\xa3\xc2\xb5\xd9\x0a\x1d\x9b\x53\x8d\x82\xd2\x28\x61\xdb\xaf\x50\xd0\x9e\x18\xbb\x8c\x02\xea\x34\xa2\x93\x88\x84\x96\x39\x90\x1c\x0e\x07\xb7\xef\xae\x5f\x57\xf3\xcb\x6a\x51\xd5\xcb\xc9\xd5\xec\x6e\x30\x24\x56\x6c\xf4\xf0\xd0\x48\xc3\x47\xe2\x62\xfc\xb2\x28\x8b\x71\x39\xfa\xaf\x0f\xc7\xcf\x82\x37\xdf\x32\x80\x2f\x7e\x35\xeb\xd4\x06\x25\x68\x15\x77\x46\xd3\xda\x47\x6e\x87\x5b\x6b\x42\xc0\x28\x92\x27\xb9\x2b\x8b\x57\xc5\xff\x62\xd5\x1b\xdb\x8c\xcb\xf1\x8b\x51\x59\x9e\x65\xcf\xe8\xfe\xdf\x39\x7f\x76\xd7\x00\x84\x9c\x2e\x02\xd8\x58\xbf\x52\xb6\x38\x5e\x7a\x8e\x6b\xd5\x5b\x9e\xe3\xc6\x10\xc7\xbd\x84\x7c\x70\x5b\xdf\xd4\x8b\xea\xc3\xf2\xbc\xba\x98\x5c\xbf\x5f\x2c\xe7\xd5\x9b\x59\xbd\x98\xdf\x2c\xe7\x93\xcf\x77\x83\x3c\x03\xd8\x29\xdb\x23\x4d\xbd\x63\x74\x2c\xe1\xbb\x38\xe8\x36\x18\xac\xdf\x77\xa9\x74\xf8\x07\x08\xbe\x99\x38\xe7\x93\x43\xef\xe8\xbe\x0a\x10\xa2\xef\x90\x5b\xec\x29\x11\x0f\x3e\x21\xca\xcf\xca\xb3\x71\xfe\x8b\x16\xd2\x51\x05\x94\x90\x73\xec\xf1\xd8\x14\xa2\xdf\x99\x06\xe3\x4f\xd9\x84\x3f\x3a\x64\xa4\x99\xdb\x44\xa4\xc7\xfb\xfa\x95\x35\xd4\x62\x53\x63\x82\x86\x0f\x2f\x00\xe8\xd4\xca\x62\x93\x32\xed\xf1\xa4\x6c\x7c\x34\xbc\x9f\x5a\x45\x74\x79\xc8\x3b\x3f\xc2\x12\xda\xf6\xc4\x18\x85\x8e\x86\x8d\x56\xf6\x78\x8a\x39\x24\x72\xd2\x8c\x18\x3c\x19\xf6\x07\x96\xa7\x38\xef\x6d\xb1\xda\x48\xc8\xc7\xc5\x68\x54\x8c\xca\x63\x91\xbd\xc5\xf8\x98\x8f\x80\x2d\xa6\xd1\xe9\x69\xc5\xa4\x69\xbc\xa3\x8f\xce\xee\xef\x55\x7c\x48\x13\x3e\x4a\xc8\xab\xaf\x86\x98\xf2\x27\x83\xce\x37\x28\xa2\xb7\x58\x3c\x10\x49\x0c\xb5\x77\x1c\xbd\x15\xc1\x2a\x87\xbf\xd1\x02\xc0\xf5\x1a\x75\x8a\xe5\xd2\xd7\xba\xc5\xa6\xb7\xf8\x67\x6b\x3a\x95\x08\xfd\xbd\x3e\x3d\x8d\xc8\x84\x0b\xd5\x19\xbb\xbf\xf2\xd6\xe8\xb4\xf7\x2a\xe2\x1a\xe3\x79\xaf\x6c\xcd\x4a\x6f\xf3\xec\x47\x00\x00\x00\xff\xff\xd7\x6b\x58\x33\xce\x04\x00\x00")

func traefikYamlBytes() ([]byte, error) {
	return bindataRead(
		_traefikYaml,
		"traefik.yaml",
	)
}

func traefikYaml() (*asset, error) {
	bytes, err := traefikYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "traefik.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ccm.yaml":           ccmYaml,
	"coredns.yaml":       corednsYaml,
	"local-storage.yaml": localStorageYaml,
	"metrics-server/aggregated-metrics-reader.yaml": metricsServerAggregatedMetricsReaderYaml,
	"metrics-server/auth-delegator.yaml":            metricsServerAuthDelegatorYaml,
	"metrics-server/auth-reader.yaml":               metricsServerAuthReaderYaml,
	"metrics-server/metrics-apiservice.yaml":        metricsServerMetricsApiserviceYaml,
	"metrics-server/metrics-server-deployment.yaml": metricsServerMetricsServerDeploymentYaml,
	"metrics-server/metrics-server-service.yaml":    metricsServerMetricsServerServiceYaml,
	"metrics-server/resource-reader.yaml":           metricsServerResourceReaderYaml,
	"rolebindings.yaml":                             rolebindingsYaml,
	"runtimes.yaml":                                 runtimesYaml,
	"traefik.yaml":                                  traefikYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"ccm.yaml":           &bintree{ccmYaml, map[string]*bintree{}},
	"coredns.yaml":       &bintree{corednsYaml, map[string]*bintree{}},
	"local-storage.yaml": &bintree{localStorageYaml, map[string]*bintree{}},
	"metrics-server": &bintree{nil, map[string]*bintree{
		"aggregated-metrics-reader.yaml": &bintree{metricsServerAggregatedMetricsReaderYaml, map[string]*bintree{}},
		"auth-delegator.yaml":            &bintree{metricsServerAuthDelegatorYaml, map[string]*bintree{}},
		"auth-reader.yaml":               &bintree{metricsServerAuthReaderYaml, map[string]*bintree{}},
		"metrics-apiservice.yaml":        &bintree{metricsServerMetricsApiserviceYaml, map[string]*bintree{}},
		"metrics-server-deployment.yaml": &bintree{metricsServerMetricsServerDeploymentYaml, map[string]*bintree{}},
		"metrics-server-service.yaml":    &bintree{metricsServerMetricsServerServiceYaml, map[string]*bintree{}},
		"resource-reader.yaml":           &bintree{metricsServerResourceReaderYaml, map[string]*bintree{}},
	}},
	"rolebindings.yaml": &bintree{rolebindingsYaml, map[string]*bintree{}},
	"runtimes.yaml":     &bintree{runtimesYaml, map[string]*bintree{}},
	"traefik.yaml":      &bintree{traefikYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
